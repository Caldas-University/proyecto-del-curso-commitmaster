using EventLogistics.Domain.Entities;
using EventLogistics.Domain.Repositories;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EventLogistics.Application.Services
{
    public class NotificationService
    {
        private readonly INotificationRepository _notificationRepository;
        private readonly INotificationHistoryRepository _historyRepository;

        public NotificationService(
            INotificationRepository notificationRepository,
            INotificationHistoryRepository historyRepository)
        {
            _notificationRepository = notificationRepository;
            _historyRepository = historyRepository;
        }

        public async Task<Notification> SendNotification(Notification notification)
        {
            // 1. Guardar la notificación
            var savedNotification = await _notificationRepository.AddAsync(notification);
            
            // 2. Registrar en el historial
            var history = new NotificationHistory
            {
                NotificationId = savedNotification.Id,
                Action = "Generated",
                ActionTimestamp = DateTime.UtcNow,
                Details = "Notification generated by the system",
                Result = "Success",
                CreatedBy = "System",
                UpdatedBy = "System"
            };
            
            await _historyRepository.AddAsync(history);
            
            // 3. Envío real (simulado aquí)
            await SendActualNotification(savedNotification);
            
            return savedNotification;
        }
        
        private async Task SendActualNotification(Notification notification)
        {
            // Simular envío de la notificación (en un sistema real, aquí integrarías con SMS, email, etc.)
            await Task.Delay(100); // Simular envío
            
            // Registrar el envío en el historial
            var history = new NotificationHistory
            {
                NotificationId = notification.Id,
                Action = "Sent",
                ActionTimestamp = DateTime.UtcNow,
                Details = "Notification sent via preferred channel",
                Result = "Success",
                CreatedBy = "System",
                UpdatedBy = "System"
            };
            
            await _historyRepository.AddAsync(history);
            
            // Actualizar estado de la notificación
            notification.Status = "Sent";
            await _notificationRepository.UpdateAsync(notification);
        }
        
        public async Task<bool> ConfirmNotification(int notificationId)
        {
            var notification = await _notificationRepository.GetByIdAsync(notificationId);
            if (notification == null)
                return false;
            
            // Actualizar estado
            notification.Status = "Confirmed";
            await _notificationRepository.UpdateAsync(notification);
            
            // Registrar en el historial
            var history = new NotificationHistory
            {
                NotificationId = notification.Id,
                Action = "Confirmed",
                ActionTimestamp = DateTime.UtcNow,
                Details = "Notification confirmed by recipient",
                Result = "Success",
                CreatedBy = "System",
                UpdatedBy = "System"
            };
            
            await _historyRepository.AddAsync(history);
            
            return true;
        }
        
        public async Task<Dictionary<string, object>> CalculateMetrics(DateTime startDate, DateTime endDate)
        {
            var metrics = new Dictionary<string, object>();
            
            var allNotifications = await _notificationRepository.GetByDateRangeAsync(startDate, endDate);
            var allHistories = await _historyRepository.GetByDateRangeAsync(startDate, endDate);
            
            // Calcular métricas
            int totalSent = 0;
            int totalConfirmed = 0;
            TimeSpan averageResponseTime = TimeSpan.Zero;
            
            foreach (var notification in allNotifications)
            {
                var sentRecord = allHistories.FirstOrDefault(h => h.NotificationId == notification.Id && h.Action == "Sent");
                var confirmedRecord = allHistories.FirstOrDefault(h => h.NotificationId == notification.Id && h.Action == "Confirmed");
                
                if (sentRecord != null)
                {
                    totalSent++;
                    
                    if (confirmedRecord != null)
                    {
                        totalConfirmed++;
                        averageResponseTime += confirmedRecord.ActionTimestamp - sentRecord.ActionTimestamp;
                    }
                }
            }
            
            if (totalConfirmed > 0)
            {
                averageResponseTime = TimeSpan.FromTicks(averageResponseTime.Ticks / totalConfirmed);
            }
            
            // Guardar métricas
            metrics["totalSent"] = totalSent;
            metrics["totalConfirmed"] = totalConfirmed;
            metrics["confirmationRate"] = totalSent > 0 ? (double)totalConfirmed / totalSent * 100 : 0;
            metrics["averageResponseTime"] = averageResponseTime.ToString(@"hh\:mm\:ss");
            
            return metrics;
        }
    }
}