namespace EventLogistics.Application.Services;

using EventLogistics.Application.DTOs;
using EventLogistics.Application.Interfaces;
using EventLogistics.Domain.Entities;
using EventLogistics.Domain.Repositories;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public class NotificationServiceApp : INotificationServiceApp
{
    private readonly INotificationRepository _notificationRepository;
    private readonly INotificationHistoryRepository _historyRepository;

    public NotificationServiceApp(
        INotificationRepository notificationRepository,
        INotificationHistoryRepository historyRepository)
    {
        _notificationRepository = notificationRepository;
        _historyRepository = historyRepository;
    }

    public async Task<NotificationDto> GenerateNotificationAsync(Guid recipientId, string content)
    {
        // Implementación del método generate_notification() del diagrama
        var notification = new Notification
        {
            RecipientId = recipientId,
            Content = content,
            Status = "Pending",
            Timestamp = DateTime.UtcNow,
            Channel = "System",
            NotificationType = "Generated",
            Confirmation = false,
            CreatedBy = "System",
            UpdatedBy = "System"
        };
        
        // Guardar la notificación en la base de datos
        var savedNotification = await _notificationRepository.AddAsync(notification);
        
        // Registrar en el historial
        var history = new NotificationHistory
        {
            NotificationId = savedNotification.Id,
            Action = "Generated",
            ActionTimestamp = DateTime.UtcNow,
            Details = "Notification generated by the system",
            Result = "Success",
            Channel = "System",
            NotificationType = "Generated",
            CreatedBy = "System",
            UpdatedBy = "System"
        };
        
        await _historyRepository.AddAsync(history);
        
        return new NotificationDto
        {
            Id = savedNotification.Id,
            RecipientId = savedNotification.RecipientId,
            Content = savedNotification.Content,
            Status = savedNotification.Status,
            Timestamp = savedNotification.Timestamp,
            Confirmation = savedNotification.Confirmation
        };
    }    public async Task<bool> SendCommunicationAsync(Guid notificationId)
    {
        // Implementación del método send_communication() del diagrama
        try
        {
            var notification = await _notificationRepository.GetByIdAsync(notificationId);
            if (notification == null)
                return false;

            // Actualizar estado de la notificación
            notification.Status = "Sent";
            notification.UpdatedBy = "System";
            await _notificationRepository.UpdateAsync(notification);

            // Registrar en el historial
            var history = new NotificationHistory
            {
                NotificationId = notificationId,
                Action = "Sent",
                ActionTimestamp = DateTime.UtcNow,
                Details = $"Notification sent via {notification.Channel}",
                Result = "Success",
                Channel = notification.Channel,
                NotificationType = notification.NotificationType,
                CreatedBy = "System",
                UpdatedBy = "System"
            };

            await _historyRepository.AddAsync(history);
            return true;
        }
        catch
        {
            return false;
        }
    }

    public async Task<bool> ConfirmReceptionAsync(Guid notificationId)
    {
        // Implementación del método confirm_reception() del diagrama
        try
        {
            var notification = await _notificationRepository.GetByIdAsync(notificationId);
            if (notification == null)
                return false;

            // Actualizar confirmación
            notification.Confirmation = true;
            notification.Status = "Confirmed";
            notification.UpdatedBy = "System";
            await _notificationRepository.UpdateAsync(notification);

            // Registrar en el historial
            var history = new NotificationHistory
            {
                NotificationId = notificationId,
                Action = "Confirmed",
                ActionTimestamp = DateTime.UtcNow,
                Details = "Reception confirmed by recipient",
                Result = "Success",
                Channel = notification.Channel,
                NotificationType = notification.NotificationType,
                CreatedBy = "System",
                UpdatedBy = "System"
            };

            await _historyRepository.AddAsync(history);
            return true;
        }
        catch
        {
            return false;
        }
    }    public async Task RegisterLogAsync(string message)
    {
        // Implementación del método register_log() del diagrama
        // Crear entrada de log genérica
        var logEntry = new NotificationHistory
        {
            NotificationId = Guid.Empty, // Log general sin notificación específica
            Action = "Log",
            ActionTimestamp = DateTime.UtcNow,
            Details = message,
            Result = "Logged",
            Channel = "System",
            NotificationType = "Log",
            CreatedBy = "System",
            UpdatedBy = "System"
        };

        await _historyRepository.AddAsync(logEntry);
    }

    public async Task<Dictionary<string, double>> CalculateMetricsAsync()
    {
        // Implementación del método calculate_metrics() del diagrama
        var metrics = new Dictionary<string, double>();

        try
        {
            // Obtener todas las notificaciones
            var allNotifications = await _notificationRepository.GetAllAsync();
            var totalNotifications = allNotifications.Count();

            // Calcular métricas básicas
            if (totalNotifications > 0)
            {
                var confirmedNotifications = allNotifications.Count(n => n.Confirmation);
                var sentNotifications = allNotifications.Count(n => n.Status == "Sent" || n.Status == "Confirmed");
                var pendingNotifications = allNotifications.Count(n => n.Status == "Pending");

                metrics["TotalNotifications"] = totalNotifications;
                metrics["ConfirmationRate"] = totalNotifications > 0 ? (double)confirmedNotifications / totalNotifications * 100 : 0;
                metrics["DeliveryRate"] = totalNotifications > 0 ? (double)sentNotifications / totalNotifications * 100 : 0;
                metrics["PendingRate"] = totalNotifications > 0 ? (double)pendingNotifications / totalNotifications * 100 : 0;
                metrics["ConfirmedNotifications"] = confirmedNotifications;
                metrics["SentNotifications"] = sentNotifications;
                metrics["PendingNotifications"] = pendingNotifications;
            }
            else
            {
                // Sin notificaciones
                metrics["TotalNotifications"] = 0;
                metrics["ConfirmationRate"] = 0;
                metrics["DeliveryRate"] = 0;
                metrics["PendingRate"] = 0;
                metrics["ConfirmedNotifications"] = 0;
                metrics["SentNotifications"] = 0;
                metrics["PendingNotifications"] = 0;
            }
        }
        catch
        {
            // En caso de error, retornar métricas vacías
            metrics["Error"] = 1;
        }

        return metrics;
    }
}
