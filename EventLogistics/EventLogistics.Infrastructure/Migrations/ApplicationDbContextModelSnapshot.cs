// <auto-generated />
using System;
using EventLogistics.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventLogistics.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("Severidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Space", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("EventLogistics.EventLogistics.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Incident", b =>
                {
                    b.HasOne("EventLogistics.EventLogistics.Domain.Entities.Activity", "Activity")
                        .WithMany("Incidents")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EventLogistics.EventLogistics.Domain.Entities.Equipment", "Equipment")
                        .WithMany("Incidents")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EventLogistics.EventLogistics.Domain.Entities.Space", "Space")
                        .WithMany("Incidents")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EventLogistics.EventLogistics.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Incidents")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Activity");

                    b.Navigation("Equipment");

                    b.Navigation("Space");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("EventLogistics.EventLogistics.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Space", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("EventLogistics.EventLogistics.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Incidents");
                });
#pragma warning restore 612, 618
        }
    }
}
